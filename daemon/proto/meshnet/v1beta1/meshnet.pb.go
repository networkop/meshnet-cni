// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        (unknown)
// source: daemon/proto/meshnet/v1beta1/meshnet.proto

package v1beta1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Pod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	SrcIp  string  `protobuf:"bytes,2,opt,name=src_ip,json=srcIp,proto3" json:"src_ip,omitempty"`
	NetNs  string  `protobuf:"bytes,3,opt,name=net_ns,json=netNs,proto3" json:"net_ns,omitempty"`
	KubeNs string  `protobuf:"bytes,4,opt,name=kube_ns,json=kubeNs,proto3" json:"kube_ns,omitempty"`
	Links  []*Link `protobuf:"bytes,5,rep,name=links,proto3" json:"links,omitempty"`
	NodeIp string  `protobuf:"bytes,6,opt,name=node_ip,json=nodeIp,proto3" json:"node_ip,omitempty"`
}

func (x *Pod) Reset() {
	*x = Pod{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_proto_meshnet_v1beta1_meshnet_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pod) ProtoMessage() {}

func (x *Pod) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_proto_meshnet_v1beta1_meshnet_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pod.ProtoReflect.Descriptor instead.
func (*Pod) Descriptor() ([]byte, []int) {
	return file_daemon_proto_meshnet_v1beta1_meshnet_proto_rawDescGZIP(), []int{0}
}

func (x *Pod) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Pod) GetSrcIp() string {
	if x != nil {
		return x.SrcIp
	}
	return ""
}

func (x *Pod) GetNetNs() string {
	if x != nil {
		return x.NetNs
	}
	return ""
}

func (x *Pod) GetKubeNs() string {
	if x != nil {
		return x.KubeNs
	}
	return ""
}

func (x *Pod) GetLinks() []*Link {
	if x != nil {
		return x.Links
	}
	return nil
}

func (x *Pod) GetNodeIp() string {
	if x != nil {
		return x.NodeIp
	}
	return ""
}

type Link struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PeerPod   string `protobuf:"bytes,1,opt,name=peer_pod,json=peerPod,proto3" json:"peer_pod,omitempty"`
	LocalIntf string `protobuf:"bytes,2,opt,name=local_intf,json=localIntf,proto3" json:"local_intf,omitempty"`
	PeerIntf  string `protobuf:"bytes,3,opt,name=peer_intf,json=peerIntf,proto3" json:"peer_intf,omitempty"`
	LocalIp   string `protobuf:"bytes,4,opt,name=local_ip,json=localIp,proto3" json:"local_ip,omitempty"`
	PeerIp    string `protobuf:"bytes,5,opt,name=peer_ip,json=peerIp,proto3" json:"peer_ip,omitempty"`
	Uid       int64  `protobuf:"varint,6,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (x *Link) Reset() {
	*x = Link{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_proto_meshnet_v1beta1_meshnet_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Link) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Link) ProtoMessage() {}

func (x *Link) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_proto_meshnet_v1beta1_meshnet_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Link.ProtoReflect.Descriptor instead.
func (*Link) Descriptor() ([]byte, []int) {
	return file_daemon_proto_meshnet_v1beta1_meshnet_proto_rawDescGZIP(), []int{1}
}

func (x *Link) GetPeerPod() string {
	if x != nil {
		return x.PeerPod
	}
	return ""
}

func (x *Link) GetLocalIntf() string {
	if x != nil {
		return x.LocalIntf
	}
	return ""
}

func (x *Link) GetPeerIntf() string {
	if x != nil {
		return x.PeerIntf
	}
	return ""
}

func (x *Link) GetLocalIp() string {
	if x != nil {
		return x.LocalIp
	}
	return ""
}

func (x *Link) GetPeerIp() string {
	if x != nil {
		return x.PeerIp
	}
	return ""
}

func (x *Link) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

type PodQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	KubeNs string `protobuf:"bytes,2,opt,name=kube_ns,json=kubeNs,proto3" json:"kube_ns,omitempty"`
}

func (x *PodQuery) Reset() {
	*x = PodQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_proto_meshnet_v1beta1_meshnet_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PodQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodQuery) ProtoMessage() {}

func (x *PodQuery) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_proto_meshnet_v1beta1_meshnet_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodQuery.ProtoReflect.Descriptor instead.
func (*PodQuery) Descriptor() ([]byte, []int) {
	return file_daemon_proto_meshnet_v1beta1_meshnet_proto_rawDescGZIP(), []int{2}
}

func (x *PodQuery) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PodQuery) GetKubeNs() string {
	if x != nil {
		return x.KubeNs
	}
	return ""
}

type SkipQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pod    string `protobuf:"bytes,1,opt,name=pod,proto3" json:"pod,omitempty"`
	Peer   string `protobuf:"bytes,2,opt,name=peer,proto3" json:"peer,omitempty"`
	KubeNs string `protobuf:"bytes,3,opt,name=kube_ns,json=kubeNs,proto3" json:"kube_ns,omitempty"`
}

func (x *SkipQuery) Reset() {
	*x = SkipQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_proto_meshnet_v1beta1_meshnet_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkipQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkipQuery) ProtoMessage() {}

func (x *SkipQuery) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_proto_meshnet_v1beta1_meshnet_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkipQuery.ProtoReflect.Descriptor instead.
func (*SkipQuery) Descriptor() ([]byte, []int) {
	return file_daemon_proto_meshnet_v1beta1_meshnet_proto_rawDescGZIP(), []int{3}
}

func (x *SkipQuery) GetPod() string {
	if x != nil {
		return x.Pod
	}
	return ""
}

func (x *SkipQuery) GetPeer() string {
	if x != nil {
		return x.Peer
	}
	return ""
}

func (x *SkipQuery) GetKubeNs() string {
	if x != nil {
		return x.KubeNs
	}
	return ""
}

type BoolResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response bool `protobuf:"varint,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *BoolResponse) Reset() {
	*x = BoolResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_proto_meshnet_v1beta1_meshnet_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BoolResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoolResponse) ProtoMessage() {}

func (x *BoolResponse) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_proto_meshnet_v1beta1_meshnet_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoolResponse.ProtoReflect.Descriptor instead.
func (*BoolResponse) Descriptor() ([]byte, []int) {
	return file_daemon_proto_meshnet_v1beta1_meshnet_proto_rawDescGZIP(), []int{4}
}

func (x *BoolResponse) GetResponse() bool {
	if x != nil {
		return x.Response
	}
	return false
}

type RemotePod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NetNs    string `protobuf:"bytes,1,opt,name=net_ns,json=netNs,proto3" json:"net_ns,omitempty"`
	IntfName string `protobuf:"bytes,2,opt,name=intf_name,json=intfName,proto3" json:"intf_name,omitempty"`
	IntfIp   string `protobuf:"bytes,3,opt,name=intf_ip,json=intfIp,proto3" json:"intf_ip,omitempty"`
	PeerVtep string `protobuf:"bytes,4,opt,name=peer_vtep,json=peerVtep,proto3" json:"peer_vtep,omitempty"`
	KubeNs   string `protobuf:"bytes,5,opt,name=kube_ns,json=kubeNs,proto3" json:"kube_ns,omitempty"`
	Vni      int64  `protobuf:"varint,6,opt,name=vni,proto3" json:"vni,omitempty"`
}

func (x *RemotePod) Reset() {
	*x = RemotePod{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_proto_meshnet_v1beta1_meshnet_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemotePod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemotePod) ProtoMessage() {}

func (x *RemotePod) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_proto_meshnet_v1beta1_meshnet_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemotePod.ProtoReflect.Descriptor instead.
func (*RemotePod) Descriptor() ([]byte, []int) {
	return file_daemon_proto_meshnet_v1beta1_meshnet_proto_rawDescGZIP(), []int{5}
}

func (x *RemotePod) GetNetNs() string {
	if x != nil {
		return x.NetNs
	}
	return ""
}

func (x *RemotePod) GetIntfName() string {
	if x != nil {
		return x.IntfName
	}
	return ""
}

func (x *RemotePod) GetIntfIp() string {
	if x != nil {
		return x.IntfIp
	}
	return ""
}

func (x *RemotePod) GetPeerVtep() string {
	if x != nil {
		return x.PeerVtep
	}
	return ""
}

func (x *RemotePod) GetKubeNs() string {
	if x != nil {
		return x.KubeNs
	}
	return ""
}

func (x *RemotePod) GetVni() int64 {
	if x != nil {
		return x.Vni
	}
	return 0
}

// The proto describes both end of a grpc-wire, the local end and the remote
// end.
type WireDef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The remote machine interface id, to which this wire is connected to.
	// When local machine sends a packet to remote mahcine over grpc-wire,
	// then along with the packet data, local machine also sends the interface id
	// to whihc this packet needs to delivered in remote machine. It avoid any
	// per packet interface lookup at the remote end. Packet delivery becomes
	// an O(1) operation at remote end.
	PeerIntfId int64 `protobuf:"varint,1,opt,name=peer_intf_id,json=peerIntfId,proto3" json:"peer_intf_id,omitempty"`
	// The remote machine interface IP, to which this grpc wire is connected to.
	PeerIp string `protobuf:"bytes,2,opt,name=peer_ip,json=peerIp,proto3" json:"peer_ip,omitempty"`
	// Interface name, which comes from topology definition and to be put
	// inside container.
	// This filed is used when grpc-wire to be created.
	IntfNameInPod string `protobuf:"bytes,3,opt,name=intf_name_in_pod,json=intfNameInPod,proto3" json:"intf_name_in_pod,omitempty"`
	// Network name space of the local pod which is connected to this
	// grpc-wire
	LocalPodNetNs string `protobuf:"bytes,4,opt,name=local_pod_net_ns,json=localPodNetNs,proto3" json:"local_pod_net_ns,omitempty"`
	// Each meshnet link has a uid.
	LinkUid int64 `protobuf:"varint,5,opt,name=link_uid,json=linkUid,proto3" json:"link_uid,omitempty"`
	// Name of the local pod where this wire is getting added.
	LocalPodName string `protobuf:"bytes,6,opt,name=local_pod_name,json=localPodName,proto3" json:"local_pod_name,omitempty"`
	// Every interface in a pod is one end of a veth pair. The other end of
	// the veth pair is with the local node. This is the name of  veth end, which
	// is with the node. Packets coming from the pod will be picked up from this
	// veth end and will be transported to the remote node over grpc wire.
	VethNameLocalHost string `protobuf:"bytes,7,opt,name=veth_name_local_host,json=vethNameLocalHost,proto3" json:"veth_name_local_host,omitempty"`
	KubeNs            string `protobuf:"bytes,8,opt,name=kube_ns,json=kubeNs,proto3" json:"kube_ns,omitempty"`
	LocalPodIp        string `protobuf:"bytes,9,opt,name=local_pod_ip,json=localPodIp,proto3" json:"local_pod_ip,omitempty"`
}

func (x *WireDef) Reset() {
	*x = WireDef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_proto_meshnet_v1beta1_meshnet_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WireDef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WireDef) ProtoMessage() {}

func (x *WireDef) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_proto_meshnet_v1beta1_meshnet_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WireDef.ProtoReflect.Descriptor instead.
func (*WireDef) Descriptor() ([]byte, []int) {
	return file_daemon_proto_meshnet_v1beta1_meshnet_proto_rawDescGZIP(), []int{6}
}

func (x *WireDef) GetPeerIntfId() int64 {
	if x != nil {
		return x.PeerIntfId
	}
	return 0
}

func (x *WireDef) GetPeerIp() string {
	if x != nil {
		return x.PeerIp
	}
	return ""
}

func (x *WireDef) GetIntfNameInPod() string {
	if x != nil {
		return x.IntfNameInPod
	}
	return ""
}

func (x *WireDef) GetLocalPodNetNs() string {
	if x != nil {
		return x.LocalPodNetNs
	}
	return ""
}

func (x *WireDef) GetLinkUid() int64 {
	if x != nil {
		return x.LinkUid
	}
	return 0
}

func (x *WireDef) GetLocalPodName() string {
	if x != nil {
		return x.LocalPodName
	}
	return ""
}

func (x *WireDef) GetVethNameLocalHost() string {
	if x != nil {
		return x.VethNameLocalHost
	}
	return ""
}

func (x *WireDef) GetKubeNs() string {
	if x != nil {
		return x.KubeNs
	}
	return ""
}

func (x *WireDef) GetLocalPodIp() string {
	if x != nil {
		return x.LocalPodIp
	}
	return ""
}

type WireCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response bool `protobuf:"varint,1,opt,name=response,proto3" json:"response,omitempty"`
	// the interface id, which was created.
	PeerIntfId int64 `protobuf:"varint,2,opt,name=peer_intf_id,json=peerIntfId,proto3" json:"peer_intf_id,omitempty"`
}

func (x *WireCreateResponse) Reset() {
	*x = WireCreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_proto_meshnet_v1beta1_meshnet_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WireCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WireCreateResponse) ProtoMessage() {}

func (x *WireCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_proto_meshnet_v1beta1_meshnet_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WireCreateResponse.ProtoReflect.Descriptor instead.
func (*WireCreateResponse) Descriptor() ([]byte, []int) {
	return file_daemon_proto_meshnet_v1beta1_meshnet_proto_rawDescGZIP(), []int{7}
}

func (x *WireCreateResponse) GetResponse() bool {
	if x != nil {
		return x.Response
	}
	return false
}

func (x *WireCreateResponse) GetPeerIntfId() int64 {
	if x != nil {
		return x.PeerIntfId
	}
	return 0
}

type Packet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the remote machine interface id, to which this packet should be delivered.
	RemotIntfId int64  `protobuf:"varint,1,opt,name=remot_intf_id,json=remotIntfId,proto3" json:"remot_intf_id,omitempty"`
	Frame       []byte `protobuf:"bytes,2,opt,name=frame,proto3" json:"frame,omitempty"`
	FrameLen    int64  `protobuf:"varint,3,opt,name=frame_len,json=frameLen,proto3" json:"frame_len,omitempty"`
}

func (x *Packet) Reset() {
	*x = Packet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_proto_meshnet_v1beta1_meshnet_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Packet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Packet) ProtoMessage() {}

func (x *Packet) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_proto_meshnet_v1beta1_meshnet_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Packet.ProtoReflect.Descriptor instead.
func (*Packet) Descriptor() ([]byte, []int) {
	return file_daemon_proto_meshnet_v1beta1_meshnet_proto_rawDescGZIP(), []int{8}
}

func (x *Packet) GetRemotIntfId() int64 {
	if x != nil {
		return x.RemotIntfId
	}
	return 0
}

func (x *Packet) GetFrame() []byte {
	if x != nil {
		return x.Frame
	}
	return nil
}

func (x *Packet) GetFrameLen() int64 {
	if x != nil {
		return x.FrameLen
	}
	return 0
}

type ReqIntfID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InContIntfNm string `protobuf:"bytes,1,opt,name=in_cont_intf_nm,json=inContIntfNm,proto3" json:"in_cont_intf_nm,omitempty"`
}

func (x *ReqIntfID) Reset() {
	*x = ReqIntfID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_proto_meshnet_v1beta1_meshnet_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqIntfID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqIntfID) ProtoMessage() {}

func (x *ReqIntfID) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_proto_meshnet_v1beta1_meshnet_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqIntfID.ProtoReflect.Descriptor instead.
func (*ReqIntfID) Descriptor() ([]byte, []int) {
	return file_daemon_proto_meshnet_v1beta1_meshnet_proto_rawDescGZIP(), []int{9}
}

func (x *ReqIntfID) GetInContIntfNm() string {
	if x != nil {
		return x.InContIntfNm
	}
	return ""
}

type RespIntfID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok          bool  `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	LocalIntfId int64 `protobuf:"varint,2,opt,name=local_intf_id,json=localIntfId,proto3" json:"local_intf_id,omitempty"`
}

func (x *RespIntfID) Reset() {
	*x = RespIntfID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_proto_meshnet_v1beta1_meshnet_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespIntfID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespIntfID) ProtoMessage() {}

func (x *RespIntfID) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_proto_meshnet_v1beta1_meshnet_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespIntfID.ProtoReflect.Descriptor instead.
func (*RespIntfID) Descriptor() ([]byte, []int) {
	return file_daemon_proto_meshnet_v1beta1_meshnet_proto_rawDescGZIP(), []int{10}
}

func (x *RespIntfID) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *RespIntfID) GetLocalIntfId() int64 {
	if x != nil {
		return x.LocalIntfId
	}
	return 0
}

var File_daemon_proto_meshnet_v1beta1_meshnet_proto protoreflect.FileDescriptor

var file_daemon_proto_meshnet_v1beta1_meshnet_proto_rawDesc = []byte{
	0x0a, 0x2a, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6d,
	0x65, 0x73, 0x68, 0x6e, 0x65, 0x74, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x6d,
	0x65, 0x73, 0x68, 0x6e, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x6d, 0x65,
	0x73, 0x68, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x22, 0xa6, 0x01,
	0x0a, 0x03, 0x50, 0x6f, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x72, 0x63,
	0x5f, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x72, 0x63, 0x49, 0x70,
	0x12, 0x15, 0x0a, 0x06, 0x6e, 0x65, 0x74, 0x5f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6e, 0x65, 0x74, 0x4e, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x6b, 0x75, 0x62, 0x65, 0x5f,
	0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6b, 0x75, 0x62, 0x65, 0x4e, 0x73,
	0x12, 0x2b, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x17, 0x0a,
	0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6e, 0x6f, 0x64, 0x65, 0x49, 0x70, 0x22, 0xa3, 0x01, 0x0a, 0x04, 0x4c, 0x69, 0x6e, 0x6b, 0x12,
	0x19, 0x0a, 0x08, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x70, 0x65, 0x65, 0x72, 0x50, 0x6f, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x66, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x65, 0x65,
	0x72, 0x5f, 0x69, 0x6e, 0x74, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x65,
	0x65, 0x72, 0x49, 0x6e, 0x74, 0x66, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f,
	0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x49,
	0x70, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x22, 0x37, 0x0a, 0x08,
	0x50, 0x6f, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07,
	0x6b, 0x75, 0x62, 0x65, 0x5f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6b,
	0x75, 0x62, 0x65, 0x4e, 0x73, 0x22, 0x4a, 0x0a, 0x09, 0x53, 0x6b, 0x69, 0x70, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x70, 0x6f, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x6b, 0x75, 0x62, 0x65,
	0x5f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6b, 0x75, 0x62, 0x65, 0x4e,
	0x73, 0x22, 0x2a, 0x0a, 0x0c, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa0, 0x01,
	0x0a, 0x09, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6f, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6e,
	0x65, 0x74, 0x5f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x65, 0x74,
	0x4e, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x69, 0x6e, 0x74, 0x66, 0x5f, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x69, 0x6e, 0x74, 0x66, 0x49, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x65, 0x65, 0x72,
	0x5f, 0x76, 0x74, 0x65, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x65, 0x65,
	0x72, 0x56, 0x74, 0x65, 0x70, 0x12, 0x17, 0x0a, 0x07, 0x6b, 0x75, 0x62, 0x65, 0x5f, 0x6e, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6b, 0x75, 0x62, 0x65, 0x4e, 0x73, 0x12, 0x10,
	0x0a, 0x03, 0x76, 0x6e, 0x69, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x76, 0x6e, 0x69,
	0x22, 0xc3, 0x02, 0x0a, 0x07, 0x57, 0x69, 0x72, 0x65, 0x44, 0x65, 0x66, 0x12, 0x20, 0x0a, 0x0c,
	0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x74, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x70, 0x65, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x66, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x70, 0x12, 0x27, 0x0a, 0x10, 0x69, 0x6e, 0x74, 0x66, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x50, 0x6f, 0x64,
	0x12, 0x27, 0x0a, 0x10, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x64, 0x5f, 0x6e, 0x65,
	0x74, 0x5f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x50, 0x6f, 0x64, 0x4e, 0x65, 0x74, 0x4e, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x69, 0x6e,
	0x6b, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6c, 0x69, 0x6e,
	0x6b, 0x55, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x70, 0x6f,
	0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x50, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x14, 0x76, 0x65,
	0x74, 0x68, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x68, 0x6f,
	0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x76, 0x65, 0x74, 0x68, 0x4e, 0x61,
	0x6d, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x6b,
	0x75, 0x62, 0x65, 0x5f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6b, 0x75,
	0x62, 0x65, 0x4e, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x70, 0x6f,
	0x64, 0x5f, 0x69, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x50, 0x6f, 0x64, 0x49, 0x70, 0x22, 0x52, 0x0a, 0x12, 0x57, 0x69, 0x72, 0x65, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x70, 0x65, 0x65, 0x72,
	0x5f, 0x69, 0x6e, 0x74, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x70, 0x65, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x66, 0x49, 0x64, 0x22, 0x5f, 0x0a, 0x06, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x5f, 0x69, 0x6e,
	0x74, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x49, 0x6e, 0x74, 0x66, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x72, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x4c, 0x65, 0x6e, 0x22, 0x32, 0x0a, 0x09, 0x52,
	0x65, 0x71, 0x49, 0x6e, 0x74, 0x66, 0x49, 0x44, 0x12, 0x25, 0x0a, 0x0f, 0x69, 0x6e, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x66, 0x5f, 0x6e, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x66, 0x4e, 0x6d, 0x22,
	0x40, 0x0a, 0x0a, 0x52, 0x65, 0x73, 0x70, 0x49, 0x6e, 0x74, 0x66, 0x49, 0x44, 0x12, 0x0e, 0x0a,
	0x02, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x6f, 0x6b, 0x12, 0x22, 0x0a,
	0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x66, 0x49,
	0x64, 0x32, 0x84, 0x05, 0x0a, 0x05, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x12, 0x36, 0x0a, 0x03, 0x47,
	0x65, 0x74, 0x12, 0x19, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x6f, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x14, 0x2e,
	0x6d, 0x65, 0x73, 0x68, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x50, 0x6f, 0x64, 0x12, 0x3f, 0x0a, 0x08, 0x53, 0x65, 0x74, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x12,
	0x14, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x50, 0x6f, 0x64, 0x1a, 0x1d, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6e, 0x65, 0x74, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x0b, 0x53, 0x6b, 0x69, 0x70, 0x52, 0x65, 0x76, 0x65,
	0x72, 0x73, 0x65, 0x12, 0x1a, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x53, 0x6b, 0x69, 0x70, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a,
	0x1d, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41,
	0x0a, 0x04, 0x53, 0x6b, 0x69, 0x70, 0x12, 0x1a, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6e, 0x65, 0x74,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x53, 0x6b, 0x69, 0x70, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x1a, 0x1d, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x46, 0x0a, 0x09, 0x49, 0x73, 0x53, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x12, 0x1a,
	0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x53, 0x6b, 0x69, 0x70, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x1d, 0x2e, 0x6d, 0x65, 0x73,
	0x68, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x0e, 0x47, 0x52, 0x50,
	0x43, 0x57, 0x69, 0x72, 0x65, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x12, 0x18, 0x2e, 0x6d, 0x65,
	0x73, 0x68, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x57, 0x69,
	0x72, 0x65, 0x44, 0x65, 0x66, 0x1a, 0x23, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6e, 0x65, 0x74, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x57, 0x69, 0x72, 0x65, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x10, 0x41, 0x64,
	0x64, 0x47, 0x52, 0x50, 0x43, 0x57, 0x69, 0x72, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x12, 0x18,
	0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x57, 0x69, 0x72, 0x65, 0x44, 0x65, 0x66, 0x1a, 0x1d, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6e,
	0x65, 0x74, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x0b, 0x52, 0x65, 0x6d, 0x47, 0x52,
	0x50, 0x43, 0x57, 0x69, 0x72, 0x65, 0x12, 0x18, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6e, 0x65, 0x74,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x57, 0x69, 0x72, 0x65, 0x44, 0x65, 0x66,
	0x1a, 0x1d, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x47, 0x0a, 0x0c, 0x47, 0x65, 0x6e, 0x4c, 0x6f, 0x63, 0x56, 0x45, 0x74, 0x68, 0x49, 0x44, 0x12,
	0x1a, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x52, 0x65, 0x71, 0x49, 0x6e, 0x74, 0x66, 0x49, 0x44, 0x1a, 0x1b, 0x2e, 0x6d, 0x65,
	0x73, 0x68, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x49, 0x6e, 0x74, 0x66, 0x49, 0x44, 0x32, 0xa1, 0x01, 0x0a, 0x06, 0x52, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x12, 0x43, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x2e,
	0x6d, 0x65, 0x73, 0x68, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6f, 0x64, 0x1a, 0x1d, 0x2e, 0x6d, 0x65, 0x73, 0x68,
	0x6e, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x47,
	0x52, 0x50, 0x43, 0x57, 0x69, 0x72, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x12, 0x18, 0x2e,
	0x6d, 0x65, 0x73, 0x68, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x57, 0x69, 0x72, 0x65, 0x44, 0x65, 0x66, 0x1a, 0x23, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6e, 0x65,
	0x74, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x57, 0x69, 0x72, 0x65, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x9e, 0x01, 0x0a,
	0x0c, 0x57, 0x69, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x44, 0x0a,
	0x0a, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x6f, 0x4f, 0x6e, 0x63, 0x65, 0x12, 0x17, 0x2e, 0x6d, 0x65,
	0x73, 0x68, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x1a, 0x1d, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6e, 0x65, 0x74, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x0c, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x6f, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x12, 0x17, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x1a, 0x1d, 0x2e, 0x6d,
	0x65, 0x73, 0x68, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x42, 0x26, 0x5a,
	0x24, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x6f, 0x70, 0x2f, 0x6d, 0x65, 0x73, 0x68, 0x6e, 0x65, 0x74, 0x2f, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_daemon_proto_meshnet_v1beta1_meshnet_proto_rawDescOnce sync.Once
	file_daemon_proto_meshnet_v1beta1_meshnet_proto_rawDescData = file_daemon_proto_meshnet_v1beta1_meshnet_proto_rawDesc
)

func file_daemon_proto_meshnet_v1beta1_meshnet_proto_rawDescGZIP() []byte {
	file_daemon_proto_meshnet_v1beta1_meshnet_proto_rawDescOnce.Do(func() {
		file_daemon_proto_meshnet_v1beta1_meshnet_proto_rawDescData = protoimpl.X.CompressGZIP(file_daemon_proto_meshnet_v1beta1_meshnet_proto_rawDescData)
	})
	return file_daemon_proto_meshnet_v1beta1_meshnet_proto_rawDescData
}

var file_daemon_proto_meshnet_v1beta1_meshnet_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_daemon_proto_meshnet_v1beta1_meshnet_proto_goTypes = []interface{}{
	(*Pod)(nil),                // 0: meshnet.v1beta1.Pod
	(*Link)(nil),               // 1: meshnet.v1beta1.Link
	(*PodQuery)(nil),           // 2: meshnet.v1beta1.PodQuery
	(*SkipQuery)(nil),          // 3: meshnet.v1beta1.SkipQuery
	(*BoolResponse)(nil),       // 4: meshnet.v1beta1.BoolResponse
	(*RemotePod)(nil),          // 5: meshnet.v1beta1.RemotePod
	(*WireDef)(nil),            // 6: meshnet.v1beta1.WireDef
	(*WireCreateResponse)(nil), // 7: meshnet.v1beta1.WireCreateResponse
	(*Packet)(nil),             // 8: meshnet.v1beta1.Packet
	(*ReqIntfID)(nil),          // 9: meshnet.v1beta1.ReqIntfID
	(*RespIntfID)(nil),         // 10: meshnet.v1beta1.RespIntfID
}
var file_daemon_proto_meshnet_v1beta1_meshnet_proto_depIdxs = []int32{
	1,  // 0: meshnet.v1beta1.Pod.links:type_name -> meshnet.v1beta1.Link
	2,  // 1: meshnet.v1beta1.Local.Get:input_type -> meshnet.v1beta1.PodQuery
	0,  // 2: meshnet.v1beta1.Local.SetAlive:input_type -> meshnet.v1beta1.Pod
	3,  // 3: meshnet.v1beta1.Local.SkipReverse:input_type -> meshnet.v1beta1.SkipQuery
	3,  // 4: meshnet.v1beta1.Local.Skip:input_type -> meshnet.v1beta1.SkipQuery
	3,  // 5: meshnet.v1beta1.Local.IsSkipped:input_type -> meshnet.v1beta1.SkipQuery
	6,  // 6: meshnet.v1beta1.Local.GRPCWireExists:input_type -> meshnet.v1beta1.WireDef
	6,  // 7: meshnet.v1beta1.Local.AddGRPCWireLocal:input_type -> meshnet.v1beta1.WireDef
	6,  // 8: meshnet.v1beta1.Local.RemGRPCWire:input_type -> meshnet.v1beta1.WireDef
	9,  // 9: meshnet.v1beta1.Local.GenLocVEthID:input_type -> meshnet.v1beta1.ReqIntfID
	5,  // 10: meshnet.v1beta1.Remote.Update:input_type -> meshnet.v1beta1.RemotePod
	6,  // 11: meshnet.v1beta1.Remote.AddGRPCWireRemote:input_type -> meshnet.v1beta1.WireDef
	8,  // 12: meshnet.v1beta1.WireProtocol.SendToOnce:input_type -> meshnet.v1beta1.Packet
	8,  // 13: meshnet.v1beta1.WireProtocol.SendToStream:input_type -> meshnet.v1beta1.Packet
	0,  // 14: meshnet.v1beta1.Local.Get:output_type -> meshnet.v1beta1.Pod
	4,  // 15: meshnet.v1beta1.Local.SetAlive:output_type -> meshnet.v1beta1.BoolResponse
	4,  // 16: meshnet.v1beta1.Local.SkipReverse:output_type -> meshnet.v1beta1.BoolResponse
	4,  // 17: meshnet.v1beta1.Local.Skip:output_type -> meshnet.v1beta1.BoolResponse
	4,  // 18: meshnet.v1beta1.Local.IsSkipped:output_type -> meshnet.v1beta1.BoolResponse
	7,  // 19: meshnet.v1beta1.Local.GRPCWireExists:output_type -> meshnet.v1beta1.WireCreateResponse
	4,  // 20: meshnet.v1beta1.Local.AddGRPCWireLocal:output_type -> meshnet.v1beta1.BoolResponse
	4,  // 21: meshnet.v1beta1.Local.RemGRPCWire:output_type -> meshnet.v1beta1.BoolResponse
	10, // 22: meshnet.v1beta1.Local.GenLocVEthID:output_type -> meshnet.v1beta1.RespIntfID
	4,  // 23: meshnet.v1beta1.Remote.Update:output_type -> meshnet.v1beta1.BoolResponse
	7,  // 24: meshnet.v1beta1.Remote.AddGRPCWireRemote:output_type -> meshnet.v1beta1.WireCreateResponse
	4,  // 25: meshnet.v1beta1.WireProtocol.SendToOnce:output_type -> meshnet.v1beta1.BoolResponse
	4,  // 26: meshnet.v1beta1.WireProtocol.SendToStream:output_type -> meshnet.v1beta1.BoolResponse
	14, // [14:27] is the sub-list for method output_type
	1,  // [1:14] is the sub-list for method input_type
	1,  // [1:1] is the sub-list for extension type_name
	1,  // [1:1] is the sub-list for extension extendee
	0,  // [0:1] is the sub-list for field type_name
}

func init() { file_daemon_proto_meshnet_v1beta1_meshnet_proto_init() }
func file_daemon_proto_meshnet_v1beta1_meshnet_proto_init() {
	if File_daemon_proto_meshnet_v1beta1_meshnet_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_daemon_proto_meshnet_v1beta1_meshnet_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pod); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_proto_meshnet_v1beta1_meshnet_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Link); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_proto_meshnet_v1beta1_meshnet_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PodQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_proto_meshnet_v1beta1_meshnet_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SkipQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_proto_meshnet_v1beta1_meshnet_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BoolResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_proto_meshnet_v1beta1_meshnet_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemotePod); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_proto_meshnet_v1beta1_meshnet_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WireDef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_proto_meshnet_v1beta1_meshnet_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WireCreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_proto_meshnet_v1beta1_meshnet_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Packet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_proto_meshnet_v1beta1_meshnet_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqIntfID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_proto_meshnet_v1beta1_meshnet_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RespIntfID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_daemon_proto_meshnet_v1beta1_meshnet_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   3,
		},
		GoTypes:           file_daemon_proto_meshnet_v1beta1_meshnet_proto_goTypes,
		DependencyIndexes: file_daemon_proto_meshnet_v1beta1_meshnet_proto_depIdxs,
		MessageInfos:      file_daemon_proto_meshnet_v1beta1_meshnet_proto_msgTypes,
	}.Build()
	File_daemon_proto_meshnet_v1beta1_meshnet_proto = out.File
	file_daemon_proto_meshnet_v1beta1_meshnet_proto_rawDesc = nil
	file_daemon_proto_meshnet_v1beta1_meshnet_proto_goTypes = nil
	file_daemon_proto_meshnet_v1beta1_meshnet_proto_depIdxs = nil
}
