// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: daemon/proto/meshnet/v1beta1/meshnet.proto

package v1beta1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LocalClient is the client API for Local service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LocalClient interface {
	Get(ctx context.Context, in *PodQuery, opts ...grpc.CallOption) (*Pod, error)
	SetAlive(ctx context.Context, in *Pod, opts ...grpc.CallOption) (*BoolResponse, error)
	SkipReverse(ctx context.Context, in *SkipQuery, opts ...grpc.CallOption) (*BoolResponse, error)
	Skip(ctx context.Context, in *SkipQuery, opts ...grpc.CallOption) (*BoolResponse, error)
	IsSkipped(ctx context.Context, in *SkipQuery, opts ...grpc.CallOption) (*BoolResponse, error)
}

type localClient struct {
	cc grpc.ClientConnInterface
}

func NewLocalClient(cc grpc.ClientConnInterface) LocalClient {
	return &localClient{cc}
}

func (c *localClient) Get(ctx context.Context, in *PodQuery, opts ...grpc.CallOption) (*Pod, error) {
	out := new(Pod)
	err := c.cc.Invoke(ctx, "/meshnet.v1beta1.Local/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localClient) SetAlive(ctx context.Context, in *Pod, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, "/meshnet.v1beta1.Local/SetAlive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localClient) SkipReverse(ctx context.Context, in *SkipQuery, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, "/meshnet.v1beta1.Local/SkipReverse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localClient) Skip(ctx context.Context, in *SkipQuery, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, "/meshnet.v1beta1.Local/Skip", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localClient) IsSkipped(ctx context.Context, in *SkipQuery, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, "/meshnet.v1beta1.Local/IsSkipped", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LocalServer is the server API for Local service.
// All implementations must embed UnimplementedLocalServer
// for forward compatibility
type LocalServer interface {
	Get(context.Context, *PodQuery) (*Pod, error)
	SetAlive(context.Context, *Pod) (*BoolResponse, error)
	SkipReverse(context.Context, *SkipQuery) (*BoolResponse, error)
	Skip(context.Context, *SkipQuery) (*BoolResponse, error)
	IsSkipped(context.Context, *SkipQuery) (*BoolResponse, error)
	mustEmbedUnimplementedLocalServer()
}

// UnimplementedLocalServer must be embedded to have forward compatible implementations.
type UnimplementedLocalServer struct {
}

func (UnimplementedLocalServer) Get(context.Context, *PodQuery) (*Pod, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedLocalServer) SetAlive(context.Context, *Pod) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAlive not implemented")
}
func (UnimplementedLocalServer) SkipReverse(context.Context, *SkipQuery) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SkipReverse not implemented")
}
func (UnimplementedLocalServer) Skip(context.Context, *SkipQuery) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Skip not implemented")
}
func (UnimplementedLocalServer) IsSkipped(context.Context, *SkipQuery) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsSkipped not implemented")
}
func (UnimplementedLocalServer) mustEmbedUnimplementedLocalServer() {}

// UnsafeLocalServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LocalServer will
// result in compilation errors.
type UnsafeLocalServer interface {
	mustEmbedUnimplementedLocalServer()
}

func RegisterLocalServer(s grpc.ServiceRegistrar, srv LocalServer) {
	s.RegisterService(&Local_ServiceDesc, srv)
}

func _Local_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PodQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/meshnet.v1beta1.Local/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalServer).Get(ctx, req.(*PodQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Local_SetAlive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pod)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalServer).SetAlive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/meshnet.v1beta1.Local/SetAlive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalServer).SetAlive(ctx, req.(*Pod))
	}
	return interceptor(ctx, in, info, handler)
}

func _Local_SkipReverse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SkipQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalServer).SkipReverse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/meshnet.v1beta1.Local/SkipReverse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalServer).SkipReverse(ctx, req.(*SkipQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Local_Skip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SkipQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalServer).Skip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/meshnet.v1beta1.Local/Skip",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalServer).Skip(ctx, req.(*SkipQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Local_IsSkipped_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SkipQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalServer).IsSkipped(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/meshnet.v1beta1.Local/IsSkipped",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalServer).IsSkipped(ctx, req.(*SkipQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// Local_ServiceDesc is the grpc.ServiceDesc for Local service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Local_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "meshnet.v1beta1.Local",
	HandlerType: (*LocalServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Local_Get_Handler,
		},
		{
			MethodName: "SetAlive",
			Handler:    _Local_SetAlive_Handler,
		},
		{
			MethodName: "SkipReverse",
			Handler:    _Local_SkipReverse_Handler,
		},
		{
			MethodName: "Skip",
			Handler:    _Local_Skip_Handler,
		},
		{
			MethodName: "IsSkipped",
			Handler:    _Local_IsSkipped_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "daemon/proto/meshnet/v1beta1/meshnet.proto",
}

// RemoteClient is the client API for Remote service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RemoteClient interface {
	Update(ctx context.Context, in *RemotePod, opts ...grpc.CallOption) (*BoolResponse, error)
}

type remoteClient struct {
	cc grpc.ClientConnInterface
}

func NewRemoteClient(cc grpc.ClientConnInterface) RemoteClient {
	return &remoteClient{cc}
}

func (c *remoteClient) Update(ctx context.Context, in *RemotePod, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, "/meshnet.v1beta1.Remote/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RemoteServer is the server API for Remote service.
// All implementations must embed UnimplementedRemoteServer
// for forward compatibility
type RemoteServer interface {
	Update(context.Context, *RemotePod) (*BoolResponse, error)
	mustEmbedUnimplementedRemoteServer()
}

// UnimplementedRemoteServer must be embedded to have forward compatible implementations.
type UnimplementedRemoteServer struct {
}

func (UnimplementedRemoteServer) Update(context.Context, *RemotePod) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedRemoteServer) mustEmbedUnimplementedRemoteServer() {}

// UnsafeRemoteServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RemoteServer will
// result in compilation errors.
type UnsafeRemoteServer interface {
	mustEmbedUnimplementedRemoteServer()
}

func RegisterRemoteServer(s grpc.ServiceRegistrar, srv RemoteServer) {
	s.RegisterService(&Remote_ServiceDesc, srv)
}

func _Remote_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemotePod)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/meshnet.v1beta1.Remote/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteServer).Update(ctx, req.(*RemotePod))
	}
	return interceptor(ctx, in, info, handler)
}

// Remote_ServiceDesc is the grpc.ServiceDesc for Remote service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Remote_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "meshnet.v1beta1.Remote",
	HandlerType: (*RemoteServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Update",
			Handler:    _Remote_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "daemon/proto/meshnet/v1beta1/meshnet.proto",
}
